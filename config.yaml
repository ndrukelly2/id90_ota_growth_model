# ===========================
# Weekly Travel Finance Simulator — CONFIG
# Input to the simulator (run via `python run.py`).
# Key ideas:
#  - Active users (WAU) split by group
#  - New accounts inflow (series or baseline+growth)
#  - 0–90d onboarding presence from a cohort CSV (optional)
#  - Mature churn (weekly)
#  - Booker rate calibration (under calibration: block)
#  - LOB frequencies × unit economics → take
#
# Important: All calibration settings live under the nested `calibration:` block.
# Supported modes in this code: "observed_bookings" | "target_annual_take" | "none".
# ===========================

# --- TIME & RUN SETTINGS ---
# time_grain is informational; the model simulates weekly rows.
time_grain: weekly
# used only for monthly conversions in comments/mental math (not directly by the model)
weeks_per_month: 4.34
# For console delta reporting vs a known baseline total take (optional)
baseline_total_take_usd: 22999643
# Number of weeks to simulate
weeks: 52

# --- GROUPS & INITIALIZATION ---
# If you don't provide per‑group WAU, the model will split `initial_wau_total`
# by these shares. If you do provide `initial_wau_by_group`, those override shares.
user_groups:
  active_user_share:
    partners: 0.55
    non_partners: 0.45
# Initialize WAU (week-averaged actives). If per‑group values are null, shares above apply.
initial_wau_total: 150000
initial_wau_by_group:
  partners: null
  non_partners: null
# Optional DAU/WAU sanity (printed by run.py; no effect on simulation)
dau_wau_ratio: 0.35

# --- NEW ACCOUNTS (SIGNUP INFLOW) ---
# Three ways to feed new accounts:
# 1) `historical_series.weekly_new_accounts_by_group` (if present, preferred)
# 2) Set `new_accounts.mode: series` and provide `series_by_group`
# 3) Otherwise, the model uses `baseline_per_week_by_group` with optional weekly growth
new_accounts:
  mode: baseline_growth
  baseline_per_week_by_group:
    partners: 1098
    non_partners: 2039
  growth_rate_weekly_by_group:
    partners: 0.0
    non_partners: 0.0
  series_by_group:
    partners:
    - 602.18
    - 1053.81
    - 1053.81
    - 1053.81
    - 1043.15
    - 979.16
    - 979.16
    - 979.16
    - 979.16
    - 932.65
    - 924.91
    - 924.91
    - 924.91
    - 976.82
    - 1046.06
    - 1046.06
    - 1046.06
    - 1025.03
    - 898.88
    - 898.88
    - 898.88
    - 898.88
    - 1015.42
    - 1062.04
    - 1062.04
    - 1062.04
    - 1106.36
    - 1217.19
    - 1217.19
    - 1217.19
    - 1281.01
    - 1440.56
    - 1440.56
    - 1440.56
    - 1440.56
    - 1374.96
    - 1364.03
    - 1364.03
    - 1364.03
    - 1304.81
    - 1260.4
    - 1260.4
    - 1260.4
    - 1248.52
    - 1177.29
    - 1177.29
    - 1177.29
    - 1177.29
    - 1207.2
    - 1212.18
    - 1212.18
    - 1212.18
    - 692.68
    non_partners:
    - 1118.33
    - 1957.1
    - 1957.1
    - 1957.1
    - 1937.29
    - 1818.43
    - 1818.43
    - 1818.43
    - 1818.43
    - 1732.08
    - 1717.68
    - 1717.68
    - 1717.68
    - 1814.11
    - 1942.66
    - 1942.66
    - 1942.66
    - 1903.63
    - 1669.36
    - 1669.36
    - 1669.36
    - 1669.36
    - 1885.78
    - 1972.36
    - 1972.36
    - 1972.36
    - 2054.68
    - 2260.49
    - 2260.49
    - 2260.49
    - 2379.01
    - 2675.32
    - 2675.32
    - 2675.32
    - 2675.32
    - 2553.49
    - 2533.19
    - 2533.19
    - 2533.19
    - 2423.22
    - 2340.74
    - 2340.74
    - 2340.74
    - 2318.7
    - 2186.39
    - 2186.39
    - 2186.39
    - 2186.39
    - 2241.94
    - 2251.21
    - 2251.21
    - 2251.21
    - 1286.4
# If provided, historical series above is preferred over the new_accounts block.
historical_series:
  weekly_new_accounts_by_group:
    partners:
    - 596.22
    - 1043.38
    - 1043.38
    - 1043.38
    - 1032.82
    - 969.47
    - 969.47
    - 969.47
    - 969.47
    - 923.42
    - 915.75
    - 915.75
    - 915.75
    - 967.15
    - 1035.7
    - 1035.7
    - 1035.7
    - 1014.88
    - 889.98
    - 889.98
    - 889.98
    - 889.98
    - 1005.37
    - 1051.52
    - 1051.52
    - 1051.52
    - 1095.41
    - 1205.14
    - 1205.14
    - 1205.14
    - 1268.33
    - 1426.3
    - 1426.3
    - 1426.3
    - 1426.3
    - 1361.35
    - 1350.52
    - 1350.52
    - 1350.52
    - 1291.89
    - 1247.92
    - 1247.92
    - 1247.92
    - 1236.16
    - 1165.63
    - 1165.63
    - 1165.63
    - 1165.63
    - 1195.25
    - 1200.18
    - 1200.18
    - 1200.18
    - 685.82
    non_partners:
    - 1107.26
    - 1937.72
    - 1937.72
    - 1937.72
    - 1918.11
    - 1800.43
    - 1800.43
    - 1800.43
    - 1800.43
    - 1714.93
    - 1700.67
    - 1700.67
    - 1700.67
    - 1796.15
    - 1923.43
    - 1923.43
    - 1923.43
    - 1884.78
    - 1652.83
    - 1652.83
    - 1652.83
    - 1652.83
    - 1867.11
    - 1952.83
    - 1952.83
    - 1952.83
    - 2034.34
    - 2238.11
    - 2238.11
    - 2238.11
    - 2355.46
    - 2648.83
    - 2648.83
    - 2648.83
    - 2648.83
    - 2528.21
    - 2508.11
    - 2508.11
    - 2508.11
    - 2399.23
    - 2317.56
    - 2317.56
    - 2317.56
    - 2295.74
    - 2164.74
    - 2164.74
    - 2164.74
    - 2164.74
    - 2219.74
    - 2228.92
    - 2228.92
    - 2228.92
    - 1273.66

# --- COHORT CSV MODE (0–90d onboarding) ---
# Provide a path to a cohort table. Supported schemas:
#  A) Long form with columns [day, p_active_day] (or p_active)
#  B) Cohort matrix: first column is an ID (e.g., cohort_date); header columns '0'..'90' are daily counts
#     Each row is normalized by its day-0 column; daily presence fractions are averaged across cohorts.
# The loader then builds weekly union presence weights W_k (k=0..12):
#   W_k = 1 - Π_{i=0..6} (1 - p_active_day[7k + i])
# Graduation fraction p_grad used by the model is the average presence over weeks 9..12 (not just day 90).
cohort_csv_path: "C:/Users/ndruk/ID90/id90_ota_growth_model/source data/ID90 New User Signup Cohort Analysis.csv"
# Optional hazard scaling: p' = 1 - (1 - p)^scale
retention_hazard_scale: 1

# --- MATURE CHURN (WEEKLY) ---
# Provide weekly churn rates per group. If you only have monthly churn, convert using:
#   weekly = 1 - (1 - monthly)^(1/4.345)
estimated_churn_from_12m_inactivity:
  weekly_mature_churn_rate_by_group:
    partners: 0.00238
    non_partners: 0.00307
# Optional post-onboarding adjustment (multiplier) by group
mature_churn_scale_by_group:
  partners: 1.0
  non_partners: 1.0

# --- BOOKER RATE (TO BE CALIBRATED OR SET) ---
# If calibration.mode == none, you can set explicit weekly booker rates here.
# Otherwise, the model will learn them within bounds.
booker_rate_weekly_by_group:
  partners: null
  non_partners: null

# --- CALIBRATION (NESTED) ---
# Supported by this code:
#   mode: "observed_bookings" | "target_annual_take" | "none"
# If mode == observed_bookings: provide a CSV with columns [week, flights, hotels, cars, cruises]
# If mode == target_annual_take: fit a shared weekly p_book to hit target_annual_take_usd
calibration:
  mode: unique_bookers  # NOTE: not implemented in current code → treated as "none"
  bookings_csv_path: "C:/Users/ndruk/ID90/id90_ota_growth_model/source data/weekly_booking_by_user_type_lob_52w.csv"  # if using observed_bookings
  weeks_to_use: 52
  non_negative: true
  shared_rate_only: true   # if true, one shared p_book is fitted
  max_weekly_booker_rate: 1.0  # safety cap during calibration
  target_annual_take_usd: 23000000  # used only if mode == target_annual_take
  schema: auto             # future: ignored by current code
  group_rate: shared       # future: ignored by current code
  rate_cap_weekly: 1.0     # future: ignored by current code

# --- PER-BOOKER ANNUAL FREQUENCIES (BY GROUP × LOB) ---
# Bookings per week = bookers × (purchases_per_booker_per_year / 52).
# You can scale these with product_mix_scale_by_lob_by_group below.
purchases_per_booker_per_year_by_lob_by_group:
  partners:
    flights: 13.9993
    hotels: 2.6382
    cars: 2.4624
    cruises: 1.7118
  non_partners:
    flights: 0.0           # only if you intend zero; otherwise update your weekly file/gates
    hotels: 2.2706
    cars: 2.2440
    cruises: 1.7967

# --- PRODUCT ATTACHMENT KNOBS ---
# Multiplier on per‑booker annual frequencies (can be a single number or per‑group mapping per LOB).
# Per-group overrides let you tweak partners vs non_partners independently, e.g.:
#   hotels:
#     partners: 1.10   # +10% for partners
#     non_partners: 0.95  # -5% for non-partners
product_mix_scale_by_lob_by_group:
  flights:
    partners: 1.0
    non_partners: 1.0
  hotels:
    partners: 1.0
    non_partners: 1.0
  cruises:
    partners: 1.0
    non_partners: 1.0
  cars:
    partners: 1.0
    non_partners: 1.0

# --- LOB UNIT ECONOMICS ---
# Take per transaction by line of business.
lobs:
  flights:
    take_per_pnr_usd: 5.0
  hotels:
    take_per_booking_usd: 44.0
  cars:
    take_per_booking_usd: 5.0
  cruises:
    take_per_booking_usd: 220.0

# --- FLIGHTS GATE (ACCESS CONTROL) ---
# Suppress flights demand for groups with false access (no redistribution to other LOBs).
flights_gate:
  partners: true
  non_partners: false
