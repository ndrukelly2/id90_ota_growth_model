# ===========================
# Weekly Travel Finance Simulator — CONFIG
# Simplified funnel: ACTIVE → BOOKERS → BOOKINGS → TAKE
# Your choices implemented:
#   - Keep New Accounts as a lever
#   - Initialize Active from WAU
#   - Use Cohort CSV mode for 0–90d onboarding contribution to WAU
#   - Calibrate p_book (booker rate) while keeping per-LOB frequencies fixed
#   - Flights gate: Partners CAN book flights; Non-partners CANNOT (suppression, no redistribution)
#   - DAU/WAU used only as a sanity check (no direct effect on the sim)
# ===========================

# --- TIME OUPUT SETTINGS ---
time_grain: weekly
weeks_per_month: 4.34 # used to convert weekly metrics to monthly
# --- BASELINE CALIBRATION OUTPUT ---
# --- The output of our initial baseline calibration run should be entered here. Only used for delta calcs ---
baseline_total_take_usd: 22241381
# --- SIMULATION HORIZON ---
weeks: 52

# --- GROUPS & INITIALIZATION ---
user_groups:
  # Share of initial WAU by group when only a total WAU is provided.
  # If you have exact per-group WAU, set those below and ignore this share.
  active_user_share:
    partners: 0.6
    non_partners: 0.4

# Initialize from WAU (7-day actives). Replace with your latest measured WAU.
# If you have per-group WAU, set `initial_wau_by_group`; otherwise set `initial_wau_total`.
initial_wau_total: 300000    # <-- From your note: 7-day MAU/WAU ≈ 300k
initial_wau_by_group:
  partners: 180000             # set integers to override shares, e.g., 160000
  non_partners: 120000

# Optional DAU/WAU sanity check (no simulation impact). If provided, the runner will print a check.
dau_wau_ratio: 0.35          # <-- From your note (≈ 35%). Implies ~2.45 active days/week per WAU.

# --- NEW ACCOUNTS (SIGNUP INFLOW) ---
# We can pull in new account information in a few different ways:
# 1) If historical_series is provided, this is our default
# 2) Alternatively, if model below is set to "series" we go with series_by_group values
# 3) Finally, if model below is anything but "series" (aka "baseline_growth")
# You can specify either a weekly baseline + growth, or an explicit weekly series.
new_accounts:
  mode: baseline_growth   # "baseline_growth" or "series"
  # When mode == baseline_growth: provide a baseline value and a weekly growth rate
  baseline_per_week_by_group:
    partners: 756         # Roughly sized so WAU is stable with ~1% weekly mature churn.
    non_partners: 2705    # Tune with your acquisition reality.
  growth_rate_weekly_by_group:
    partners: 0.00        # e.g., 0.01 for +1% WoW growth in new accounts
    non_partners: 0.00
  # When mode == series: provide explicit arrays of length = weeks (below)
  series_by_group:
    partners: []          # e.g., [1000, 1020, ...]
    non_partners: []

# --- ACUTAL DATA TO CALIBRATE OR p_book. Comment this out when defining above ---
historical_series:
  weekly_new_accounts_by_group:
    partners: [596.22, 1043.38, 1043.38, 1043.38, 1032.82, 969.47, 969.47, 969.47, 969.47, 923.42, 915.75, 915.75, 915.75, 967.15, 1035.70, 1035.70, 1035.70, 1014.88, 889.98, 889.98, 889.98, 889.98, 1005.37, 1051.52, 1051.52, 1051.52, 1095.41, 1205.14, 1205.14, 1205.14, 1268.33, 1426.30, 1426.30, 1426.30, 1426.30, 1361.35, 1350.52, 1350.52, 1350.52, 1291.89, 1247.92, 1247.92, 1247.92, 1236.16, 1165.63, 1165.63, 1165.63, 1165.63, 1195.25, 1200.18, 1200.18, 1200.18, 685.82]
    non_partners: [1107.26, 1937.72, 1937.72, 1937.72, 1918.11, 1800.43, 1800.43, 1800.43, 1800.43, 1714.93, 1700.67, 1700.67, 1700.67, 1796.15, 1923.43, 1923.43, 1923.43, 1884.78, 1652.83, 1652.83, 1652.83, 1652.83, 1867.11, 1952.83, 1952.83, 1952.83, 2034.34, 2238.11, 2238.11, 2238.11, 2355.46, 2648.83, 2648.83, 2648.83, 2648.83, 2528.21, 2508.11, 2508.11, 2508.11, 2399.23, 2317.56, 2317.56, 2317.56, 2295.74, 2164.74, 2164.74, 2164.74, 2164.74, 2219.74, 2228.92, 2228.92, 2228.92, 1273.66]
  weekly_churn_12m_crossers_by_group:
    partners: [546.97, 957.19, 957.19, 957.19, 960.08, 977.43, 977.43, 977.43, 977.43, 1046.50, 1058.02, 1058.02, 1058.02, 1038.98, 1013.60, 1013.60, 1013.60, 984.77, 811.77, 811.77, 811.77, 811.77, 987.26, 1057.45, 1057.45, 1057.45, 1065.79, 1086.63, 1086.63, 1086.63, 1105.87, 1153.98, 1153.98, 1153.98, 1153.98, 1093.05, 1082.90, 1082.90, 1082.90, 1176.87, 1247.35, 1247.35, 1247.35, 1249.96, 1265.60, 1265.60, 1265.60, 1265.60, 1187.15, 1174.08, 1174.08, 1174.08, 670.90]
    non_partners: [546.97, 957.20, 957.20, 957.20, 960.09, 977.44, 977.44, 977.44, 977.44, 1046.51, 1058.01, 1058.01, 1058.01, 1038.98, 1013.60, 1013.60, 1013.60, 984.77, 811.78, 811.78, 811.78, 811.78, 987.26, 1057.45, 1057.45, 1057.45, 1065.78, 1086.62, 1086.62, 1086.62, 1105.87, 1153.99, 1153.99, 1153.99, 1153.99, 1093.06, 1082.90, 1082.90, 1082.90, 1176.88, 1247.36, 1247.36, 1247.36, 1249.96, 1265.60, 1265.60, 1265.60, 1265.60, 1187.16, 1174.08, 1174.08, 1174.08, 670.91]

# --- COHORT CSV MODE (0–90d onboarding) ---
cohort_csv_path: "C:/Users/ndruk/ID90/id90_ota_growth_model/source data/ID90 New User Signup Cohort Analysis.csv"
# The CSV is expected to be a "cohort table":
#   first column = "cohort_date"
#   subsequent columns = counts of returning/active users at day offsets 0..90 for that cohort.
# The loader normalizes each row by day 0 to derive p_active_day[d], then converts to weekly WAU presence weights W_k via:
#   W_k = 1 - Π_{i=0..6} (1 - p_active_day[7k + i])   for k in 0..12
# and sets p_grad = p_active_day[90] as the graduation fraction to mature at day 90.
retention_hazard_scale: 1.0  # Keep at 1.0 now; later you can tune retention by scaling hazards.

# --- MATURE CHURN (APPLIES AFTER 90d) ---
# Provide MONTHLY churn rates for **mature** active users.
# If you only know 12-month sign-in retention R12, convert to weekly: c_w = 1 - R12^(1/52),
# then reverse-compound to monthly: c_m = 1 - (1 - c_w)^(4.345).
monthly_mature_churn_rate_by_group:
  partners: 0.025
  non_partners: 0.045
# --- MATURE CHURN ADJUSTMENTS (APPLIES AFTER 90d) ---
# Scale mature churn rates by this factor after 90 days to assess impact.
# Note: Calibration mode must be "none" and an actual p_book must be set.
mature_churn_scale_by_group:
  partners: 1.0        # e.g., 0.90 = reduce partners churn 10%
  non_partners: 1.0    # e.g., 1.10 = increase non-partners churn 10%

# --- BOOKER RATE (to be calibrated) ---
# We will fit p_book (booker_rate_weekly_by_group) using one of the calibration modes below.
# Once calibrated, we can set this value here and play with other variables to assess their impact
booker_rate_weekly_by_group:
  partners: 0.862229 #0.758569
  non_partners: 0.862229 #0.758569

calibration:
  # Mode A (default): if you have observed bookings by LOB per week, we fit p_book by least squares.
  mode: "none"   # "observed_bookings" or "target_annual_take" or "none" to test vars
  bookings_csv_path: "C:/Users/ndruk/ID90/id90_ota_growth_model/source data/weekly_bookings_by_lob.csv"    # e.g., weekly_bookings_by_lob.csv with columns: week,flights,hotels,cars,cruises
  weeks_to_use: 52
  non_negative: true
  # If mode == target_annual_take, we estimate a **single** common p_book to hit this revenue target
  # (since we have one scalar target). You can later switch to observed_bookings to fit per-group p_book.
  #target_annual_take_usd: 23000000   # <-- From your note (~$23M/year)
    # Stability controls for the fit.
  shared_rate_only: true
  max_weekly_booker_rate: 1.0
  target_annual_take_usd: 23500000 # mode must = target_annual_take to calibrate on this (via p_book )

# --- PER-BOOKER ANNUAL FREQUENCIES (FIXED) ---
# Keep simple for now; later you can differentiate by group if needed.
purchases_per_booker_per_year_by_lob_by_group:
  partners:
    flights: 11.26
    hotels: 1.16
    cars: 0.50
    cruises: 0.08
  non_partners:
    flights: 0.0   # Will be zeroed by the flights gate below
    hotels: 1.16
    cars: 0.5
    cruises: 0.08

# --- PRODUCT ATTACHMENT KNOBS ---
# Multiply the base purchases_per_booker_per_year_by_lob_by_group
# Flights multipliers affect PNRS/booker; others affect BOOKINGS/booker.
product_mix_scale_by_lob_by_group:
  flights:         # per-group override for flights
    partners: 1.00        # +10% PNRS/booker for partners
    non_partners: 1.00
  hotels: 1.00            # +5% bookings/booker for both groups
  cruises: 1.00           # -10%
  cars: 1.00              # no change

# --- LOB ECONOMICS: DO NOT CHANGE ---
lobs:
  flights:
    take_per_pnr_usd: 5.00
  hotels:
    take_per_booking_usd: 45.0
  cars:
    take_per_booking_usd: 5.5
  cruises:
    take_per_booking_usd: 220.0


# --- FLIGHTS GATE (Suppression: non-partners cannot book flights) ---
flights_gate:
  partners: true
  non_partners: false

# ------------------------------------------------------------------------------
# Auto-derived data (last 52 weeks)
# These sections DO NOT change existing behavior unless your model reads them.
# Recommended use: if present, prefer these series over baseline+growth.
# Source files:
#   new accounts: ./source data/New Accounts_data.csv
#   12m inactivity crossers: ./source data/Member Churn_data.csv
# Coverage: week_end 2024-08-11 → 2025-08-03  (52 weeks)
# DAU/WAU sanity: 0.35 (≈ 2.45 active days per WAU)
# ------------------------------------------------------------------------------

initial_wau_by_group:
  partners: 150000   # split of your stated WAU≈300000
  non_partners: 150000


